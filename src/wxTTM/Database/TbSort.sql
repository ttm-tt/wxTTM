// Erzeugt eine temporaere Tabelle mit allen Ergebnissen einer Gruppe
tmp->ExecuteUpdate(str = 
  "CREATE FUNCTION mtResultsFunc  \n"
  "(	  \n"
  "	 @grID " + INTEGER + "  \n"
  ")  \n"
  "RETURNS @t TABLE   \n"
  "(  \n"
  "	 grID " + INTEGER + ",  \n"
  "	 stA  " + INTEGER + ",  \n"
  "	 stX  " + INTEGER + ",  \n"
  "	 mtMatches " + SMALLINT + ",  \n"
  "	 mtBestOf  " + SMALLINT + ",  \n"
  "	 mtWalkOverA " + SMALLINT + ",  \n"
  "	 mtWalkOverX " + SMALLINT + ",  \n"
  "  mtInjuredA  " + SMALLINT + ", \n"
  "  mtInjuredX  " + SMALLINT + ", \n"
  "  mtDisqualifiedA " + SMALLINT + ", \n"
  "  mtDisqualifiedX " + SMALLINT + ", \n"
  "	 mtBallsA " + SMALLINT + ",  \n"
  "	 mtBallsX " + SMALLINT + ",  \n"
  "	 mtSetsA  " + SMALLINT + ",  \n"
  "	 mtSetsX  " + SMALLINT + ",  \n"
  "	 mtMatchesA " + SMALLINT + ",  \n"
  "	 mtMatchesX " + SMALLINT + ",  \n"
  "	 mtPointsA  " + SMALLINT + " DEFAULT 0,  \n"
  "	 mtPointsX  " + SMALLINT + " DEFAULT 0,  \n"
  "	 mtMatchPoints " + SMALLINT + " DEFAULT 0  \n"
  ")  \n"
  "AS  \n"
  "BEGIN  \n"
  "  DECLARE @ptsWin  " + SMALLINT + " \n"
  "  DECLARE @ptsTie  " + SMALLINT + " \n"
  "  DECLARE @ptsLoss " + SMALLINT + " \n"
  "  DECLARE @mdID " + INTEGER + " \n"
  "  SET @mdID = (SELECT mdID FROM GrRec WHERE grID = @grID)" + " \n"
  "  SET @ptsWin = (SELECT ISNULL(mdMtPtsWin, 2) FROM MdRec WHERE mdID = @mdID) \n"
  "  SET @ptsTie = (SELECT ISNULL(mdMtPtsTie, 1) FROM MdRec WHERE mdID = @mdID) \n"
  "  SET @ptsLoss = (SELECT ISNULL(mdMtPtsLoss, 1) FROM MdRec WHERE mdID = @mdID) \n"

  "  --- Insert all finished results as A - X \n"
  "	 INSERT INTO @t (grID, stA, stX, mtMatches, mtBestOf, \n"
  "                  mtWalkOverA, mtWalkOverX, mtInjuredA, mtInjuredX, mtDisqualifiedA, mtDisqualifiedX,  \n"
  "				     mtBallsA, mtBallsX, mtSetsA, mtSetsX, mtMatchesA, mtMatchesX)  \n"
  "	 SELECT @grID,   \n"
  "				  MtRec.stA, MtRec.stX, MtRec.mtMatches, MtRec.mtBestOf,  \n"
  "				  MtRec.mtWalkOverA, MtRec.mtWalkOverX,  \n"
  "               MtMatch.mtInjuredA, MtMatch.mtInjuredX, \n"
  "               MtMatch.mtDisqualifiedA, MtMatch.mtDisqualifiedX, \n"
  "				  MtSet.mtResA, MtSet.mtResX,   \n"
  "				  MtMatch.mtResA, MtMatch.mtResX,   \n"
  "				  MtRec.mtResA, MtRec.mtResX  \n"
  "	  FROM MtSet INNER JOIN MtMatch ON MtSet.mtID = MtMatch.mtID   \n"
  "               INNER JOIN MtRec ON MtMatch.mtID = MtRec.mtID  \n"
  "	 WHERE MtSet.mtSet = 0 AND MtSet.mtMS = 0 AND MtMatch.mtMS = 0 AND MtRec.grID = @grID AND  \n"
  "		        (MtRec.mtMatches > 1 AND (2 * MtRec.mtResA >= MtRec.mtMatches OR 2 * MtRec.mtResX >= MtRec.mtMatches) OR  \n"
  "			    (MtRec.mtMatches = 1 AND (2 * MtRec.mtResA > MtRec.mtBestOf  OR 2 * MtRec.mtResX > MtRec.mtBestOf)))  \n"
  "	  \n"
  "  --- Insert all finished results as X - A \n"
  "	 INSERT INTO @t (grID, stA, stX, mtMatches, mtBestOf, \n"
  "                  mtWalkOverA, mtWalkOverX, mtInjuredA, mtInjuredX, mtDisqualifiedA, mtDisqualifiedX,  \n"
  "					 mtBallsA, mtBallsX, mtSetsA, mtSetsX, mtMatchesA, mtMatchesX)  \n"
  "	 SELECT @grID,   \n"
  "				  MtRec.stX, MtRec.stA, MtRec.mtMatches, MtRec.mtBestOf,  \n"
  "				  MtRec.mtWalkOverX, MtRec.mtWalkOverA,  \n"
  "               MtMatch.mtInjuredX, MtMatch.mtInjuredA, \n"
  "               MtMatch.mtDisqualifiedX, MtMatch.mtDisqualifiedA, \n"
  "				  MtSet.mtResX, MtSet.mtResA,   \n"
  "				  MtMatch.mtResX, MtMatch.mtResA,   \n"
  "				  MtRec.mtResX, MtRec.mtResA  \n"
  "	  FROM MtSet INNER JOIN MtMatch ON MtSet.mtID = MtMatch.mtID   \n"
  "               INNER JOIN MtRec ON MtMatch.mtID = MtRec.mtID  \n"
  "	 WHERE MtSet.mtSet = 0 AND MtSet.mtMS = 0 AND MtMatch.mtMS = 0 AND MtRec.grID = @grID AND  \n"
  "			    (MtRec.mtMatches > 1 AND (2 * MtRec.mtResA >= MtRec.mtMatches OR 2 * MtRec.mtResX >= MtRec.mtMatches) OR  \n"
  "			    (MtRec.mtMatches = 1 AND (2 * MtRec.mtResA > MtRec.mtBestOf  OR 2 * MtRec.mtResX > MtRec.mtBestOf)))  \n"
  "  \n"
  "  --- Update mtMatches, mtPoints and mtMatchPoints for individual events \n"
  "  --- Here mtMatchesA/X contain the sets, not the matches \n"
  "  ---   Winners gain 2 points \n"
  "	 UPDATE @t SET mtMatchesA = 1, mtMatchesX = 0, mtPointsA = 1, mtPointsX = 0, mtMatchPoints = 2 \n"
  "   WHERE mtMatches = 1 AND mtMatchesA > mtMatchesX  \n"
  "  --- Losers gain 1 points in a finished match (not w/o or disqualified or injured) \n"
  "	 UPDATE @t SET mtMatchesA = 0, mtMatchesX = 1, mtPointsA = 0, mtPointsX = 1, mtMatchPoints = 1 \n"
  "   WHERE mtMatches = 1 AND mtMatchesX > mtMatchesA AND mtWalkOverA = 0 AND mtInjuredA = 0 AND mtDisqualifiedA = 0 \n"
  "  \n"
  "  ---    Update mtPoints and mtMatchPoints for team events\n"
  "  ---   Winners gain ptsWin points \n"
  "	 UPDATE @t SET mtPointsA = 2, mtPointsX = 0, mtMatchPoints = @ptsWin \n"
  "   WHERE mtMatches > 1 AND mtMatchesA > mtMatchesX  \n"
  "  --- Losers gain ptsLoss points in a finished match (not w/o or disqualified or injured) \n"
  "	 UPDATE @t SET mtPointsA = 0, mtPointsX = 2, mtMatchPoints = @ptsLoss \n"
  "   WHERE mtMatches > 1 AND mtMatchesX > mtMatchesA AND mtWalkOverA = 0 AND mtInjuredA = 0 aND mtDisqualifiedA = 0 \n"
  "  --- In a tie both gain ptsTie point \n"
  "	 UPDATE @t SET mtPointsA = 1, mtPointsX = 1, mtMatchPoints = @ptsTie \n"
  "   WHERE mtMatches > 1 AND mtMatchesA = mtMatchesX  \n"
  "  \n"
  "	RETURN  \n"
  "	  \n"
  "END  \n"
);  
  

// Summiert die Ergebnisse der Spieler in @ids auf
tmp->ExecuteUpdate(str = 
  "CREATE FUNCTION SumUpFunc  \n"
  "(	  \n"
  "	 @grID " + INTEGER + ",  \n"
  "	 @ids " + VARCHAR + "(200)  \n"
  ")  \n"
  "RETURNS @t TABLE   \n"
  "(  \n"
  "	 grID " + INTEGER + ",  \n"
  "	 stID " + INTEGER + ",  \n"
  "	 stPos " + INTEGER + ",  \n"
  "	 mtBallsA " + SMALLINT + ",  \n"
  "	 mtBallsX " + SMALLINT + ",  \n"
  "	 mtSetsA  " + SMALLINT + ",  \n"
  "	 mtSetsX  " + SMALLINT + ",  \n"
  "	 mtMatchesA " + SMALLINT + ",  \n"
  "	 mtMatchesX " + SMALLINT + ",  \n"
  "	 mtPointsA  " + SMALLINT + ",  \n"
  "	 mtPointsX  " + SMALLINT + ",  \n"
  "	 mtMatchCount  " + SMALLINT + ",  \n"
  "	 mtMatchPoints " + SMALLINT + "  \n"
  ")  \n"
  "AS  \n"
  "BEGIN  \n"
  "	 DECLARE @tmp TABLE (id " + INTEGER + ")  \n"
  "	 DECLARE @pos " + SMALLINT + "  \n"
  "	 SET @pos = 0  \n"
  
  "  --- Split @ids at ',' and put values into @tmp table \n"
  "  WHILE (@pos <= LEN(@ids))  \n"
  "	 BEGIN  \n"
  "	 	 INSERT INTO @tmp (id) SELECT SUBSTRING(@ids, @pos, CHARINDEX(',', @ids, @pos) - @pos)  \n"
  "		 SET @pos = CHARINDEX(',', @ids, @pos) + 1  \n"
  "	 END  \n"
  "  \n"
  "  --- Sum all results where players from @ids have played and put it into @t \n"
  "  --- But skip all results with players who gave up \n"
  "	 INSERT INTO @t (grID, stID, stPos, mtBallsA, mtBallsX, mtSetsA, mtSetsX,   \n"
  "				     mtMatchesA, mtMatchesX, mtPointsA, mtPointsX, mtMatchCount, mtMatchPoints)  \n"
  "		SELECT @grID, stA, 0, SUM(mtBallsA), SUM(mtBallsX), SUM(mtSetsA), SUM(mtSetsX),   \n"
  "			   SUM(mtMatchesA), SUM(mtMatchesX), SUM(mtPointsA), SUM(mtPointsX),  \n"
  "			   COUNT(*), SUM(mtMatchPoints)	   \n"
  "		  FROM mtResultsFunc(@grID)   \n"
  "	           INNER JOIN StRec StAList ON mtResultsFunc.stA = StAList.stID \n"
  "            INNER JOIN StRec StXList ON mtResultsFunc.stX = StXList.stID \n"
  "		 WHERE stA IN (SELECT id FROM @tmp) AND stX IN (SELECT id FROM @tmp) AND \n"		       
  "            StAList.stGaveup = 0 AND StXList.stGaveup = 0 AND \n"
  "            StAList.stDisqu = 0 AND StXList.stDisqu = 0 \n"
  "		 GROUP BY stA  \n"
  "  --- Plus all non played results \n"
  "	 INSERT INTO @t (grID, stID, stPos, mtBallsA, mtBallsX, mtSetsA, mtSetsX,   \n"
  "				     mtMatchesA, mtMatchesX, mtPointsA, mtPointsX, mtMatchCount, mtMatchPoints)  \n"
  "		SELECT @grID, id, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 \n"
  "       FROM @tmp WHERE id NOT IN (SELECT stID FROM @t) \n"
  "  \n"
  "	 RETURN  \n"
  "END  \n"
);


// Vergleicht 2 Ergebnisse anhand der Differenz  
tmp->ExecuteUpdate(str = 
  "CREATE FUNCTION DiffFunc  \n"
  "(  \n"
	"  @p1A " + SMALLINT + ",  \n"
	"  @p1X " + SMALLINT + ",  \n"
	"  @p2A " + SMALLINT + ",  \n"
	"  @p2X " + SMALLINT + "  \n"
  ")  \n"
  "RETURNS " + SMALLINT + "  \n"
  "AS  \n"
  "BEGIN  \n"
	"  RETURN (@p2A - @p2X) - (@p1A - @p1X)  \n"
  "END  \n"
);  


// Vergleicht 2 Ergebnisse anhand des Quotienten
tmp->ExecuteUpdate(str = 
  "CREATE FUNCTION QuotFunc  \n"
  "(  \n"
	"  @p1A " + SMALLINT + ",  \n"
	"  @p1X " + SMALLINT + ",  \n"
	"  @p2A " + SMALLINT + ",  \n" 
	"  @p2X " + SMALLINT + "   \n"
  ")  \n"
  "RETURNS " + SMALLINT + "  \n"
  "AS  \n"
  "BEGIN  \n"
	"  --- If both divisors are 0: Return difference of Nominators  \n"
	"  IF (@p1X = 0 AND @p2X = 0)  \n"
  "	   RETURN (@p2A - @p1A)  \n"
  "  \n"
	"  --- If one is 0 / 0: Return difference of the other  \n"
	"  --- If one is x / 0: This one is better  \n"
	"  IF (@p1A = 0 AND @p1X = 0)  \n"
	"	   RETURN (@p2A - @p2X)  \n"
  "	  \n"
	"  IF (@p2A = 0 AND @p2X = 0)  \n"
	"	   RETURN -(@p1A - @p2A)  \n"
  "  \n"
	"  IF (@p1X = 0)  \n"
	"	   RETURN -1  \n"
  "  \n"
	"  IF (@p2X = 0)  \n"
	"	   RETURN 1  \n"
  "  \n"
	"  --- Return better ratio  \n"
	"  IF ( CAST(@p1A AS FLOAT) / CAST(@p1X AS FLOAT) > CAST(@p2A AS FLOAT) / CAST(@p2X AS FLOAT))  \n"
	"	   RETURN -1  \n"
  "	  \n"
	"  IF ( CAST(@p1A AS FLOAT) / CAST(@p1X AS FLOAT) < CAST(@p2A AS FLOAT) / CAST(@p2X AS FLOAT))  \n"
	"	   RETURN 1  \n"
  "  \n"
	"  RETURN 0  \n"
  "END  \n"
);

#include "DttbSort.sql"
#include "IttfSort.sql"


// Create overall "View". Switch to appropriate modus according to tournamnet settings.
tmp->ExecuteUpdate(str = 
  "--- Calculate results for group @grID according to selected modus (ITTF or DTTB) \n"
  "CREATE FUNCTION TbSortFunc  \n"
  "(	  \n"
	"  @grID " + INTEGER + "  \n"
  ")  \n"
  "RETURNS @t TABLE   \n"
  "(  \n"
	"  grID " + INTEGER + ",  \n"
	"  stID " + INTEGER + ",  \n"
	"  stPos " + SMALLINT + ",  \n"
	"  mtBallsA " + SMALLINT + ",  \n"
	"  mtBallsX " + SMALLINT + ",  \n"
	"  mtSetsA  " + SMALLINT + ",  \n"
	"  mtSetsX  " + SMALLINT + ",  \n"
	"  mtMatchesA " + SMALLINT + ",  \n"
	"  mtMatchesX " + SMALLINT + ",  \n"
	"  mtPointsA  " + SMALLINT + ",  \n"
	"  mtPointsX  " + SMALLINT + ",  \n"
	"  mtMatchCount  " + SMALLINT + ",  \n"
	"  mtMatchPoints " + SMALLINT + "  \n"
    ")  \n"
    "AS  \n"
    "BEGIN  \n"
    " DECLARE @count " + SMALLINT + " \n"
    "  --- Only RR groups will be considered \n"
    "  IF ((SELECT grModus FROM GrRec WHERE grID = @grID) <> 1)  \n"
    "	  RETURN  \n"
    "  \n"
	"  IF ((SELECT idTable FROM IdRec) = 1)  \n"
	"  BEGIN  \n"
	"   --- ITTF table \n"
	"	  INSERT INTO @t (grID, stID, stPos,   \n"
	"					  mtBallsA, mtBallsX, mtSetsA, mtSetsX, mtMatchesA, mtMatchesX,   \n"
	"					  mtPointsA, mtPointsX, mtMatchCount, mtMatchPoints)   \n"
	"	  SELECT  grID, stID, stPos,   \n"
	"		        mtBallsA, mtBallsX, mtSetsA, mtSetsX, mtMatchesA, mtMatchesX,  \n"
	"	  	      mtPointsA, mtPointsX, mtMatchCount, mtMatchPoints  \n"
	"	    FROM dbo.IttfSortFunc(@grID)  \n"
	"  END  \n"
	"  ELSE IF ((SELECT idTable FROM IdRec) = 2) \n"
 	"  BEGIN  \n"
	"   --- DTTB Table \n"
	"	  INSERT INTO @t (grID, stID, stPos,   \n"
	"					  mtBallsA, mtBallsX, mtSetsA, mtSetsX, mtMatchesA, mtMatchesX,   \n"
	"					  mtPointsA, mtPointsX, mtMatchCount, mtMatchPoints)   \n"
	"	  SELECT  grID, stID, stPos,   \n"
	"		        mtBallsA, mtBallsX, mtSetsA, mtSetsX, mtMatchesA, mtMatchesX,   \n"
	"	  	      mtPointsA, mtPointsX, mtMatchCount, mtMatchPoints  \n"
	"	    FROM dbo.DttbSortFunc(@grID)  \n"
	"  END  \n"
    "  \n"
	"  RETURN  \n"
    "END  \n"
);
