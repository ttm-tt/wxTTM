// TODO: Fehlerbehandlung?

// Spieler (in KO-Raster) fortschreiben
    tmp->ExecuteUpdate(str = 
        "CREATE PROCEDURE mtUpdateRasterProc \n"
        "   @mtNr AS " + INTEGER + ", \n"
        "   @forWinner AS " + SMALLINT + " \n"
        "AS \n"
        "   DECLARE @mtMatches " + INTEGER + "; \n"
        "   DECLARE @mtBestOf " + INTEGER + "; \n"
        "   DECLARE @mtRound " + INTEGER + "; \n"
        "   DECLARE @mtMatch " + INTEGER + "; \n"
        "   DECLARE @mtChance " + SMALLINT + "; \n"
        "   DECLARE @mtResA " + INTEGER + "; \n"
        "   DECLARE @mtResX " + INTEGER + "; \n"
        "   DECLARE @mtChecked " + INTEGER + "; \n"
        "   DECLARE @stA " + INTEGER + "; \n"
        "   DECLARE @stX " + INTEGER + "; \n"
        "   DECLARE @tmA " + INTEGER + "; \n"
        "   DECLARE @tmX " + INTEGER + "; \n"
        "   DECLARE @stPos " + INTEGER + "; \n"
        "   DECLARE @grID " + INTEGER + "; \n"
        "   DECLARE @grModus " + INTEGER + "; \n"
        "   DECLARE @grSize " + INTEGER + "; \n"     
        "   DECLARE @grNofRounds " + INTEGER + "; \n"     
        "   DECLARE @maxRounds " + INTEGER + "; \n"
        "   DECLARE @id " + INTEGER + "; \n"
        "   DECLARE @ax " + INTEGER + "; \n"
        "   DECLARE @chunk " + INTEGER + "; \n"
        "   DECLARE @offset " + INTEGER + "; \n"
        "   DECLARE @tmp " + INTEGER + "; \n"
        "   DECLARE @tmID " + INTEGER + "; \n"
        
        "   SET @mtMatches  = (SELECT mtMatches FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @mtBestOf = (SELECT mtBestOf FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @mtRound  = (SELECT mtRound FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @mtMatch  = (SELECT mtMatch FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @mtChance = (SELECT mtChance FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @mtResA   = (SELECT mtResA FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @mtResX   = (SELECT mtResX FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @mtChecked = (SELECT mtChecked FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @stA      = (SELECT stA FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @stX      = (SELECT stX FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @tmA      = (SELECT tmID FROM StRec WHERE stID = @stA); \n"
        "   SET @tmX      = (SELECT tmID FROM StRec WHERE stID = @stX); \n"
        "   SET @grID     = (SELECT grID FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @grModus  = (SELECT grModus FROM GrRec WHERE grID = @grID); \n"
        "   SET @grSize   = (SELECT grSize FROM GrRec WHERE grID = @grID); \n"
        "   SET @grNofRounds = (SELECT grNofRounds FROM GrRec WHERE grID = @grID); \n"
        
        "   --- Round Robin: Nothing to do \n"
        "   IF @grModus = 1 \n"
        "     RETURN; \n"
                
        "   --- Double knock out: Nothing to do for loser on loser side \n"
        "   IF @grModus = 3 \n"
        "   BEGIN \n"
        "     IF @mtChance > 0 AND @forWinner = 0 \n"
        "       RETURN; \n"
        "   END \n"
        
        "   --- Calculate number of rounds in this group \n"
        "   SET @maxRounds = 0; \n"
        "   SET @tmp = 1; \n"
        "   WHILE (@tmp < @grSize) \n"
        "   BEGIN \n"
        "     SET @tmp = 2 * @tmp; \n"
        "     SET @maxRounds = @maxRounds + 1; \n"
        "   END \n"
        " \n"
        "   IF (@grNofRounds = 0) \n"
        "     SET @grNofRounds = @maxRounds; \n"
        " \n"
        
        "  --- Correct for DKO \n"
        "   IF @grModus = 3 \n"
        "   BEGIN \n"
        "     IF @mtChance > 0 \n"
        "       SET @maxRounds = 2 * @maxRounds - 1; \n"
        "     ELSE \n"
        "       SET @maxRounds = @maxRounds + 1; \n"
        "   END \n"
        
        "   IF @mtMatches > 1 \n"
        "     SET @tmp = @mtMatches; \n"
        "   ELSE \n"
        "     SET @tmp = @mtBestOf; \n"
        
        "   IF 2 * @mtResA > @tmp \n"
        "   BEGIN \n"
        "     IF @forWinner > 0 \n"
        "       SET @id = @stA; \n"
        "     ELSE \n"
        "       SET @id = @stX; \n"
        "   END \n"
        "   ELSE IF 2 * @mtResX > @tmp \n"
        "   BEGIN \n"
        "     IF @forWinner > 0 \n"
        "       SET @id = @stX; \n"
        "     ELSE \n"
        "       SET @id = @stA; \n"
        "   END \n"
        "   ELSE IF @stA IS NULL AND @stX IS NULL \n"
        "   BEGIN \n"
        "       SET @id = NULL; \n"
        "   END \n"
        "   ELSE IF @stA IS NULL \n"
        "   BEGIN \n"
        "     IF @forWinner > 0 \n"
        "       SET @id = NULL; \n"
        "     ELSE IF @tmX IS NULL \n"
        "       SET @id = @stX; \n"
        "     ELSE \n"
        "       SET @id = NULL; \n"
        "   END \n"
        "   ELSE IF @stX IS NULL \n"
        "   BEGIN \n"
        "     IF @forWinner > 0 \n"
        "       SET @id = NULL; \n"
        "     ELSE IF @tmA IS NULL \n"
        "       SET @id = @stA; \n"
        "     ELSE \n"
        "       SET @id = NULL; \n"
        "   END \n"
        "   ELSE IF @tmX IS NULL \n"
        "   BEGIN \n"
        "     IF @forWinner > 0 \n"
        "       SET @id = @stA; \n"
        "     ELSE \n"
        "       SET @id = @stX; \n"
        "   END \n"
        "   ELSE IF @tmA IS NULL \n"
        "   BEGIN \n"
        "     IF @forWinner > 0 \n"
        "       SET @id = @stX; \n"
        "     ELSE \n"
        "       SET @id = @stA; \n"
        "   END \n"        
        "   ELSE \n"
        "   BEGIN \n"
        "     SET @id = NULL; \n"
        "   END \n"

        "   IF (@mtResA > 0 OR @mtResX > 0) AND @mtChecked = 0 \n"
        "     SET @id = NULL; \n"
        
        "   --- Update stPos \n"
        "   IF @id <> NULL \n"
        "   BEGIN \n"
        "   ---   At present time: KO AND Play Off only \n"
        "   ---   Round Robin would need a calculated table \n"
        "     IF @grModus = 2 \n"
        "     BEGIN \n"
        "       IF @forWinner = 1 AND @mtRound = @maxRounds \n"
        "         SET @stPos = 1; \n"
        "       ELSE IF @forWinner = 0 AND @mtRound = @maxRounds \n"
        "         SET @stPos = 2; \n"
        "       ELSE IF @forWinner = 1 AND @mtRound = @grNofRounds \n"
        "         SET @stPos = POWER(2, @maxRounds - (@mtRound + 1)) + 1; \n"
        "       ELSE IF @forWinner = 0 \n"
        "         SET @stPos = POWER(2, @maxRounds - @mtRound) + 1; \n"
        "       ELSE \n"
        "         SET @stPos = 0; \n"
        "     END \n"
        "     ELSE IF @grModus = 4 \n"
        "     BEGIN \n"
        "       IF @mtRound = @maxRounds \n"
        "         SET @stPos = 2 * @mtMatch - @forWinner; \n"
        "       ELSE IF @mtRound = @maxRounds - 1 AND @mtMatch <= 2 AND @forWinner = 0 \n"
        "   ---   There may be no match for place 3 \n"
        "         SET @stPos = 3; \n"
        "     END \n"
        "   --- Update record \n"
        "     UPDATE StRec SET stPos = @stPos WHERE stID = @id AND NOT (stPos IS NULL AND @stPos IS NULL); \n"
        "   END \n"
        "   ELSE \n"
        "   BEGIN \n"
        "     SET @stPos = 0; \n"
        "   END \n"
        
        "   ---   Update StRec according to XxRec \n"
        "   ---   For KO and Play Off mtMatch equals the final position \n"
        "   SET @tmID = (SELECT tmID FROM StRec WHERE stID = @id); \n"
        "   UPDATE StRec SET tmID = @tmID \n"
        "    WHERE stID = (SELECT stID FROM XxRec WHERE grID = @grID AND grPos = @stPos) AND NOT (tmID IS NULL AND @tmID IS NULL); \n"
        
        "   ---   And finished \n"     
        "   IF @mtRound = @maxRounds OR \n"
        "      @grModus = 2 AND @forWinner = 0 OR\n"
        "      @mtChance = 1 AND @forWinner = 0\n"
        "   BEGIN \n"
        "     RETURN \n"
        "   END \n"
        
        "   --- Update the next match \n"
        "   SET @ax = 1; \n"
        
        "   IF @grModus = 2 \n"
        "       BEGIN \n"
        "         SET @ax = (@mtMatch % 2); --- odd to a, even to x \n "
        "         SET @mtRound = @mtRound + 1; \n"
        "         SET @mtMatch = 1 + (@mtMatch - 1) / 2; \n"
        "       END \n"
        "   ELSE IF @grModus = 3 \n"
        "   BEGIN \n"
        "       IF @mtChance = 0 --- Main side \n"
        "       BEGIN \n"
        "         SET @ax = (@mtMatch % 2); --- odd to a, even to x \n "
        "         SET @mtRound = @mtRound + 1; \n"
        "         SET @mtMatch = 1 + (@mtMatch - 1) / 2; \n"
        "       END; \n "
        "       ELSE \n"
        "       BEGIN \n"
        "           IF @mtRound = @maxRounds --- Winner of loser side \n"
        "           BEGIN \n"
        "             SET @mtChance = 0; \n"
        "             SET @ax = 0; --- to x \n"
        "             SET @mtRound = (@maxRounds + 1) / 2 + 1; \n"
        "             SET @mtMatch = 1; \n"
        "           END \n"
        "           ELSE \n"
        "           BEGIN \n"
        "             SET @mtRound = @mtRound + 1; \n"
        "             IF  2 * (@mtRound / 2) = @mtRound --- even round \n"
        "             BEGIN \n"
        "               SET @ax = (@mtMatch % 2); --- odd to a, even to x \n "
        "               SET @mtMatch = 1 + (@mtMatch - 1) / 2; \n"
        "             END \n"
        "             ELSE --- odd match \n"
        "               SET @ax = 1;  --- to a \n"
        "               SET @mtMatch = @mtMatch;  --- no change \n"
        "           END \n"
        "       END \n"
        "   END \n"
        "   ELSE IF @grModus = 4 \n"
        "       BEGIN \n"
        "         SET @ax = (@mtMatch % 2); \n "
        "         SET @chunk = @grSize; \n"
        "         SET @tmp = 0; \n"
        "         WHILE @tmp < @mtRound \n"
        "         BEGIN \n"
        "           SET @chunk = @chunk / 2; \n"
        "           SET @tmp = @tmp + 1; \n"
        "         END \n"
        "         SET @mtRound = @mtRound + 1; \n"
        "         SET @offset = FLOOR((@mtMatch - 1) / @chunk) * @chunk; \n"
        "         SET @mtMatch = @offset + 1 + (@mtMatch - @offset - 1) / 2; \n"
        "         IF @forWinner = 0 \n"
        "         BEGIN \n"
        "           SET @mtMatch = @mtMatch + @chunk / 2; \n"
        "         END \n"
        "      END --- WHEN 4\n"
        
        " --- Update next match \n"
        "    SET @mtNr = (SELECT mtNr FROM MtRec \n"
        "                  WHERE grID = @grID AND \n"        
        "                        mtRound = @mtRound AND \n"
        "                        mtMatch = @mtMatch AND \n"
        "                        mtChance = @mtChance); \n"
        
        "    IF @ax > 0 \n"
        "      UPDATE MtRec SET stA = @id WHERE mtNr = @mtNr AND NOT (stA IS NULL AND @id IS NULL); \n"
        "    ELSE \n"
        "      UPDATE MtRec SET stX = @id WHERE mtNr = @mtNr AND NOT (stX IS NULL AND @id IS NULL); \n"
        
        " --- Continue with next match \n"
        "    EXEC mtUpdateRasterProc @mtNr, 1; \n"
        "    EXEC mtUpdateRasterProc @mtNr, 0; \n" 
        );

// Ergebnis in die DB eintragen
    tmp->ExecuteUpdate(str = 
        "CREATE PROCEDURE mtSetResultProc \n"
        "       @mtNr " + INTEGER + ", \n"
        "       @mtMS " + SMALLINT + ", \n"
        "       @mtBestOf " + SMALLINT + ", \n"
        "       @mtSets " + VARCHAR + "(40), \n"
        "       @mtWalkOverA " + SMALLINT + " = 0, \n"
        "       @mtWalkOverX " + SMALLINT + " = 0, \n"
        "       @mtInjuredA " + SMALLINT + " = 0, \n"
        "       @mtInjuredX " + SMALLINT + " = 0, \n"
        "       @mtDisqualifiedA " + SMALLINT + " = 0, \n"
        "       @mtDisqualifiedX " + SMALLINT + " = 0 \n"
        "AS \n"
        "   --- Get mtID etc. \n"
        "   DECLARE @mtID " + INTEGER + ";\n"
        "   DECLARE @grID " + INTEGER + ";\n"
        "   DECLARE @cpId " + INTEGER + ";\n"
        "   DECLARE @pos " + INTEGER + ";\n"
        "   DECLARE @mtResA " + SMALLINT + ";\n"
        "   DECLARE @mtResX " + SMALLINT + ";\n"
        "   DECLARE @mtMatches " + SMALLINT + ";\n"
        "   DECLARE @ptsToWin " + SMALLINT + ";\n"
        "   DECLARE @ptsToWinLast " + SMALLINT + ";\n"
        "   DECLARE @ptsAhead " + SMALLINT + ";\n"
        "   DECLARE @ptsAheadLast " + SMALLINT + ";\n"
        "   DECLARE @pts " + SMALLINT + ";\n"
        "   DECLARE @win " + SMALLINT + ";\n"
        "   DECLARE @tmp " + SMALLINT + ";\n"
        
        "   SET @mtID = (SELECT mtID FROM MtRec WHERE mtNr = @mtNr); \n"
        "   SET @grID = (SELECT grID FROM MtRec WHERE mtID = @mtID); \n"
        "   SET @cpID = (SELECT cpID FROM GrRec WHERE grID = @grID); \n"
        "   SELECT @ptsToWin = cpPtsToWin, @ptsToWinLast = cpPtsToWinLast, @ptsAhead = cpPtsAhead, @ptsAheadLast = cpPtsAheadLast FROM CpRec WHERE cpID = @cpID;\n"
        "   SELECT @mtMatches = mtMatches, @mtBestOf = mtBestOf FROM MtRec WHERE mtNr = @mtNr; \n"

        "   --- Special case if there is only 1 game \n"
        "   IF (@mtBestOf = 1) \n"
        "   BEGIN \n"
        "     SET @ptsToWinLast = @ptsToWin; \n"
        "     SET @ptsAheadLast = @ptsAhead; \n"
        "   END \n"

        "   SET @tmp = 0;\n"
        
        "   --- Remove and insert all results into MtSet \n"
        "   DELETE FROM MtSet WHERE mtID = @mtID AND mtMS = @mtMS AND mtSet > 0; \n"
        "   SET @pos = 1; \n"
        "   WHILE @pos <= DATALENGTH(@mtSets) - 3 \n"
        "   BEGIN \n"
        "     SET @pts = IIF(@pos = @mtBestOf, @ptsToWinLast, @ptsToWin);\n"
        "     SET @win = IIF(@pos = @mtBestOf, @ptsAheadLast, @ptsAhead);\n"
        "     SET @mtResA = CONVERT(" + SMALLINT + ", SUBSTRING(@mtSets, @pos, 2)); \n"
        "     SET @mtResX = CONVERT(" + SMALLINT + ", SUBSTRING(@mtSets, @pos + 2, 2)); \n"
        
        "     IF @mtResA = 0 AND @mtResX = 0 --- Break at the first empty set \n"        
        "       BREAK \n"
        "     ELSE IF @mtResA >= @mtResX + @win AND @mtResA >= @pts \n"
        "       SET @tmp = @tmp + 1;\n"
        "     ELSE IF @mtResX >= @mtResA + @win AND @mtResX >= @pts \n"
        "       SET @tmp = @tmp + 1;\n"
        
        "     INSERT INTO MtSet (mtID, mtMS, mtSet, mtResA, mtResX) \n"
        "                VALUES (@mtID, @mtMS, (@pos / 4) + 1, @mtResA, @mtResX); \n"
        "     SET @pos = @pos + 4; \n"
        "   END   \n"
        
        "   --- Update timestamp \n"
        "   UPDATE MtRec SET mtTimestamp = CURRENT_TIMESTAMP WHERE mtID = @mtID;\n"
        
        "   --- Update mtSet summary \n"
        "   ---    mtSet == 0: Summe dieses Spiels \n"
        "   DELETE FROM MtSet WHERE mtID = @mtID AND mtMS = @mtMS AND mtSet = 0; \n"
        "   INSERT INTO MtSet (mtID, mtMS, mtSet, mtResA, mtResX) \n"
        "              SELECT @mtID, @mtMS, 0, ISNULL(SUM(mtResA), 0), ISNULL(SUM(mtResX), 0) \n"
        "                FROM MtSet \n"
        "               WHERE mtID = @mtID AND mtMS = @mtMS AND \n"
        "                     (mtResA >= mtResX + @ptsAhead AND mtResA >= @ptsToWin AND mtSet < @mtBestOf OR \n"
        "                      mtResA >= mtResX + @ptsAheadLast AND mtResA >= @ptsToWinLast AND mtSet = @mtBestOf OR \n"
        "                      mtResX >= mtResA + @ptsAhead AND mtResX >= @ptsToWin AND mtSet < @mtBestOf OR \n" 
        "                      mtResX >= mtResA + @ptsAheadLast AND mtResX >= @ptsToWinLast AND mtSet = @mtBestOf); \n" 

        "   ---    mtSet == 0, mtMS == 0: Summe aller Spiele (mtSet = 0, mtMS > 0) \n"
        "   IF (@mtMS > 0) \n"
        "   BEGIN \n"
        "     DELETE FROM MtSet WHERE mtID = @mtID AND mtMS = 0 AND mtSet = 0; \n"
        "     INSERT INTO MtSet (mtID, mtMS, mtSet, mtResA, mtResX) \n"
        "                SELECT @mtID, 0, 0, ISNULL(SUM(mtResA), 0), ISNULL(SUM(mtResX), 0) \n"
        "                  FROM MtSet \n"
        "                 WHERE mtID = @mtID AND mtSet = 0 AND mtMS > 0 AND \n"
        "                       (mtResA >= mtResX + @ptsAhead AND mtResA >= @ptsToWin AND mtSet < @mtBestOf OR \n"
        "                        mtResA >= mtResX + @ptsAheadLast AND mtResA >= @ptsToWinLast AND mtSet = @mtBestOf OR \n"
        "                        mtResX >= mtResA + @ptsAhead AND mtResX >= @ptsToWin AND mtSet < @mtBestOf OR \n" 
        "                        mtResX >= mtResA + @ptsAheadLast AND mtResX >= @ptsToWinLast AND mtSet = @mtBestOf); \n" 
        "   END \n"
        
        "   --- Update Match \n"
        "   ---   Ergebnis dieses Spiels in Saetzen \n"
        "   DELETE FROM MtMatch WHERE mtID = @mtID AND mtMS = @mtMS; \n"
        "   INSERT INTO MtMatch (mtID, mtMS, mtResA, mtResX, mtWalkOverA, mtWalkOverX, mtInjuredA, mtInjuredX, mtDisqualifiedA, mtDisqualifiedX) \n"
        "                SELECT @mtID, @mtMS, \n"
        "                       ISNULL((SELECT COUNT(*) FROM MtSet \n"
        "                                WHERE mtID = @mtID AND mtMS = @mtMS AND mtSet > 0 AND \n"
        "                                      (mtResA >= mtResX + @ptsAhead AND mtResA >= @ptsToWin AND mtSet < @mtBestOf OR \n"
        "                                       mtResA >= mtResX + @ptsAheadLast AND mtResA >= @ptsToWinLast AND mtSet = @mtBestOf)), 0), \n"
        "                       ISNULL((SELECT COUNT(*) FROM MtSet \n"
        "                                WHERE mtID = @mtID AND mtMS = @mtMS AND mtSet > 0 AND \n"
        "                                      (mtResX >= mtResA + @ptsAhead AND mtResX >= @ptsToWin AND mtSet < @mtBestOf OR \n"
        "                                       mtResX >= mtResA + @ptsAheadLast AND mtResX >= @ptsToWinLast AND mtSet = @mtBestOf)), 0), \n"
        "                       @mtWalkOverA, @mtWalkOverX, @mtInjuredA, @mtInjuredX, @mtDisqualifiedA, @mtDisqualifiedX; \n"
        
        "   ---    mtMS == 0: Ergebnis aller bendeten Spiele (mtMS > 0) in Saetzen \n"
        "   IF @mtMS > 0 \n"
        "   BEGIN \n"
        "     DELETE FROM MtMatch WHERE mtID = @mtID AND mtMS = 0; \n"
        "     INSERT INTO MtMatch (mtID, mtMS, mtResA, mtResX) \n"
        "                  SELECT @mtID, 0, \n"
        "                         ISNULL((SELECT COUNT(*) FROM MtSet \n"
        "                                  WHERE mtID = @mtID AND mtSet > 0 AND mtMS > 0 AND \n"
        "                                        mtResA > mtResX AND 2 * mtResA > @mtBestOf), 0), \n"
        "                         ISNULL((SELECT COUNT(*) FROM MtSet \n"
        "                                  WHERE mtID = @mtID AND mtSet > 0 AND mtMS > 0 AND \n"
        "                                        mtResX > mtResA AND mtResX > 2 * @mtBestOf), 0); \n"
        "   END \n"
        
        "   --- Sum up matches in team events or games in individual events (equals MtMatch) \n"
        "   IF @mtMS > 0 \n"
        "   BEGIN \n"
        "     UPDATE MtRec SET \n"
        // "         mtBestOf = @mtBestOf, \n"
        // "         mtWalkoverA = CASE WHEN (SELECT COUNT(*) FROM MtMatch WHERE mtID = @mtID AND mtMS > 0 AND mtWalkOverA <> 0) > @mtMatches / 2 THEN 1 ELSE 0 END, \n"
        // "         mtWalkoverX = CASE WHEN (SELECT COUNT(*) FROM MtMatch WHERE mtID = @mtID AND mtMS > 0 AND mtWalkOverX <> 0) > @mtMatches / 2 THEN 1 ELSE 0 END, \n"
        // "         mtWalkOverA = @mtWalkOverA, \n"
        // "         mtWalkOverX = @mtWalkOverX, \n"
        "         mtResA = ISNULL((SELECT COUNT(*) FROM MtMatch \n"
        "                           WHERE mtID = @mtID AND mtMS > 0 AND \n"
        "                                 mtResA > mtResX AND 2 * mtResA > @mtBestOf), 0), \n"
        "         mtResX = ISNULL((SELECT COUNT(*) FROM MtMatch \n"
        "                           WHERE mtID = @mtID AND mtMS > 0 AND \n"
        "                                 mtResX > mtResA AND 2 * mtResX > @mtBestOf), 0) \n"
        "      WHERE mtID = @mtID; \n"
        "   END \n"
        "   ELSE \n"
        "   BEGIN \n"
        "     UPDATE MtRec SET \n"
        // "         mtBestOf = @mtBestOf, \n"
        " --- mtWalkOver, mtInjured and mtDisqualifed are copies of MtMatch for an individual Match \n"
        "         mtWalkOverA = @mtWalkOverA, \n"
        "         mtWalkOverX = @mtWalkOverX, \n"
        "         mtInjuredA = @mtInjuredA, \n"
        "         mtInjuredX = @mtInjuredX, \n"
        "         mtDisqualifiedA = @mtDisqualifiedA, \n"
        "         mtDisqualifiedX = @mtDisqualifiedX, \n"
        "         mtResA = (SELECT mtResA FROM MtMatch WHERE mtID = @mtID), \n"
        "         mtResX = (SELECT mtResX FROM MtMatch WHERE mtID = @mtID)  \n"
        "      WHERE mtID = @mtID; \n"
        "   END \n"        
        
        "   --- Update group table, but for finished games only (or not played at all) \n"
        "   IF @tmp < @mtBestOf AND DATALENGTH(@mtSets) >= 4 * (@tmp + 1) AND \n"
        "      SUBSTRING(@mtSets, 4 * @tmp + 1, 4) <> '0000' \n"
        "     RETURN \n"
        
        "   SET @grID = (SELECT grID FROM MtRec WHERE mtNr = @mtNr); \n"
        "   IF ( (SELECT grModus FROM GrRec WHERE grID = @grID) = 1 ) \n"
        "   BEGIN \n"
        "     IF ( (SELECT COUNT(*) FROM MtRec mt \n"
        "                                LEFT OUTER JOIN StRec stA ON mt.stA = stA.stID \n "
        "                                LEFT OUTER JOIN StRec stX ON mt.stX = stX.stID \n "
        "            WHERE mt.grID = @grID AND \n"
        "                  (stA.stID IS NULL OR stA.tmID IS NOT NULL) AND \n"
        "                  (stX.stID IS NULL OR stX.tmID IS NOT NULL) AND \n"
        "                  (mtWalkOverA = 0 AND mtWalkOverX = 0) AND \n"
        "                  (mtInjuredA = 0 AND mtInjuredX = 0) AND \n"
        "                  (mtDisqualifiedA = 0 AND mtDisqualifiedX = 0) AND \n"
        "                  ((mtMatches = 1 AND 2 * mtResA < mtBestOf AND 2 * mtResX < mtBestOf) OR \n"
        "                   (mtMatches > 1 AND 2 * mtResA < mtMatches AND 2 * mtResX < mtMatches))) = 0 ) \n"
        "     BEGIN \n"
        "   ---    All matches played, update final position \n"
        "       DECLARE @stPos " + SMALLINT + "\n"
        "       DECLARE @stID " + INTEGER + "\n"
        "  \n"
        "       DECLARE @stPosCursor CURSOR \n"
        "       SET @stPosCursor = CURSOR FOR \n"
        "           (SELECT stID, stPos FROM TbSortFunc(@grID)) \n"
        "       OPEN @stPosCursor \n"
        "       FETCH NEXT FROM @stPosCursor INTO @stID, @stPos \n"
        "       WHILE (@@FETCH_STATUS = 0) \n"
        "       BEGIN \n"        
        "         UPDATE StRec SET stPos = @stPos WHERE stID = @stID \n"
        "         UPDATE StRec SET tmID = (SELECT tmID FROM StRec WHERE stID = @stID) \n"
        "          WHERE stID = (SELECT stID FROM XxRec WHERE grID = @grID AND grPos = @stPos) \n"
        "         FETCH NEXT FROM @stPosCursor INTO @stID, @stPos \n"
        "       END \n"
        "  \n"
        "       CLOSE @stPosCursor \n"
        "       DEALLOCATE @stPosCursor \n"
        "     END \n"
        "     ELSE \n"
        "     BEGIN \n"
        "   ---    Matches are msising, clear final position \n"
        "       UPDATE StRec SET stPos = 0 WHERE grID = @grID AND stPos <> 0 \n"
        "       UPDATE StRec SET tmID = NULL \n"
        "        WHERE stID IN (SELECT stID FROM XxRec WHERE grID = @grID) \n"        
        "     END \n"
        "   END \n"
        
        "    --- Update Raster \n"
        "    EXEC mtUpdateRasterProc @mtNr, 1; \n"
        "    EXEC mtUpdateRasterProc @mtNr, 0; \n"
    );
    
