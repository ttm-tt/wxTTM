; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#include "it_download.iss"

#define Version '25.10.01'

[Setup]
AppName=TTM
AppVersion={#Version}
VersionInfoVersion={#Version}
AppVerName=TTM {#Version}
AppPublisher=Christoph Theis
AppMutex=TTM
DefaultDirName={autopf}\TTM
DefaultGroupName=TTM
OutputDir=Output
OutputBaseFilename=install
; SourceDir=F:\user\ChT\wxTTM
SourceDir=..
; Logging
; SetupLogging=yes

; Man braucht admin-Rechte, um ReportMan.ocx registrieren zu koennen
; PrivilegesRequired=none
; Mindestens Windows 7
MinVersion=6.1sp1

; 64 Bit Version auf 64 Bit Windows installieren, setzt Is64BitInstallMode Variable
; ArchitecturesInstallIn64BitMode=x64

; Sign installer
; SignTool=MS /d $qTable Tennis Manager$q $f

; Close TTM before installation
CloseApplications=force

[Languages]
Name: en; MessagesFile: compiler:Default.isl
Name: de; MessagesFile: compiler:Languages\German.isl
                                                                                                            

[CustomMessages]
;English Version (en)
;=======================
en.Language=en
en.ProgramAndDatabase=Program and Database
en.ProgramOnly=Program only
en.AdditionalIcons=Additional icons
en.CreateDesktopIcon=Create a &desktop icon
en.Playerlist=List of Players
en.PlayerlistPerName=List of Players Sorted by Name
en.PlayerlistPerNumber=List of Players Sorted by Number
en.PlayerlistPerAssociation=List of Players Sorted by Association
en.PlayerControl=List of Players with Birthday
en.Participants=List of Players with their Events
en.Entries=Participants per Event
en.PartnerMissing=Players with Partner Missing
en.Ranking=Ranking by Association
en.WorldRanking=International Ranking
en.Registration=Registration
en.TeamEntries=Entries in Team Event
en.ChampionshipEntries=Entries in Championship
en.ConsolationEntries=Entries in Consolation
en.MatchList=Liste of Matches
en.GroupResults=Final Standing in Groups
en.FinalStandings=Final Standing
en.RebootMessage=You need to reboot to continue installation. If the setup program doesn't start automatically, please run it again.
en.PasswordPageTitle=Enter Password
en.PasswordPageDescription=Enter password for the SQL Server Admin "sa"
en.EmptyPassword=Password cannot be empty
en.PasswordDoesNotMatch=Password and Confirm Password do not match
en.EnterPassword=Password
en.ConfirmPassword=Confirm Password
en.SelectLicenseFile=Select License File

;Deutsche Version (de)
;========================
de.Language=de
de.ProgramAndDatabase=Programm und Datenbank
de.ProgramOnly=Nur Programm
de.AdditionalIcons=Weitere Icons
de.CreateDesktopIcon=Ein Icon auf dem &Desktop anlegen
de.Playerlist=Liste der Spieler
de.PlayerlistPerName=Spieler sortiert nach Nachname
de.PlayerlistPerNumber=Spieler sortiert nach Startnummer
de.PlayerlistPerAssociation=Spieler sortiert nach Verband
de.PlayerControl=Spieler mit Geburtsjahr
de.Participants=Spieler mit ihren Wettbewerben
de.Entries=Teilnehmer eines Wettbewerbs
de.PartnerMissing=Spieler ohne Doppel-/Mixedpartner
de.Ranking=Rangfolge in einem Verband
de.WorldRanking=Internationale Reihenfolge
de.Registration=Registrierung
de.TeamEntries=Teilnehmer im Mannschaftswettbewerb
de.ChampionshipEntries=Teilnehmer in Hauptrunde
de.ConsolationEntries=Teilnehmer in Trostrunde
de.MatchList=Liste der Spiele
de.GroupResults=Position in Gruppen
de.FinalStandings=Siegerliste
de.RebootMessage=Sie müssen den Computer neu starten um die Installation fortzusetzen. Wenn das Setup Programm nicht automatisch startet, starten Sie es bitte erneut.
de.PasswordPageTitle=Passworteingabe
de.PasswordPageDescription=Passwort für den SQL Server Admin "sa" eingeben
de.EmptyPassword=Passwort darf nicht leer sein
de.PasswordDoesNotMatch=Passwort und Passwort wiederholen stimmen nicht überein
de.EnterPassword=Passwort
de.Confirmpassword=Passwort wiederholen
de.SelectLicenseFile=Lizenzdatei Auswählen


[Types]
Name: full; Description: {cm:ProgramandDatabase}; Check: isAdminInstallMode And IsWin64()
Name: client; Description: {cm:ProgramOnly}

[Components]
Name: Client; Description: Program files; Types: full client; Flags: fixed
Name: Database; Description: Program and Database; Types: full; Check: isAdminInstallMode

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}:

[Dirs]
; Brauche ich, um die Berechtigungen zu setzen.
; Installation ist vom Admin, ausfuehren soll es aber ein non-admin
Name: {code:GetIniDir}; Permissions: authusers-modify

[Files]
Source: src\wxTTM\x86\Release\TTM32.exe; DestDir: {app}; Flags: ignoreversion signonce; Check: not Is64BitInstallMode()
; Source: src\wxTTM\x64\Release\TTM32.exe; DestDir: {app}; Flags: ignoreversion signonce; Check: Is64BitInstallMode()
Source: src\Resources\shortcuts.html; DestDir: {app}; Flags: ignoreversion
Source: src\Resources\3rdparty.html; DestDir: {app}; Flags: ignoreversion
Source: src\Resources\en\ttm.mo; DestDir: {app}\en; Flags: ignoreversion
Source: src\Resources\de\ttm.mo; DestDir: {app}\de; Flags: ignoreversion
Source: src\Resources\ttm.xrc; DestDir: {app}; Flags: ignoreversion
;Source: "Output\gdiplus.dll"; DestDir: "{app}" CopyMode: alwaysskipifsameorolder
;Source: "Output\Readme.txt"; DestDir: "{app}"; Flags: ignoreversion
;Source: "Output\UserManual105de.pdf"; DestDir: "{app}"; Flags: ignoreversion
;Source: "Output\Manual.pdf"; DestDir: "{app}"; CopyMode: alwaysoverwrite
Source: src\Reports\x86\ReportMan.ocx; DestDir: {sys}; Flags: restartreplace sharedfile regserver; Check: isAdminInstallMode and not Is64BitInstallMode()
Source: src\Reports\x64\ReportMan.ocx; DestDir: {sys}; Flags: restartreplace sharedfile regserver; Check: isAdminInstallMode and Is64BitInstallMode()
;Source: src\Reports\ReportMan.ocx.manifest; DestDir: {sys}; Check: isAdminInstallMode
Source: src\Reports\Playerlist.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\PlayerlistPerName.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\PlayerlistPerNumber.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\PlayerlistPerAssociation.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\Participants.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\Entries.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\PartnerMissing.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\Ranking.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\WorldRanking.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\Registration.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\TeamEntries.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\ChampionshipEntries.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\ConsolationEntries.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\MatchList.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\GroupResults.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\Standings.rep; DestDir: {app}; Flags: ignoreversion
Source: src\Reports\FinalStandings.rep; DestDir: {app}; Flags: ignoreversion
; Damit ich die Rechte setzen kann ("Users" im englischen, "Benutzer" im deutschen), ein leeres File kopieren
; Source: "Output\TT32.ini"; DestDir: "{code:GetIniDir}"; Flags: onlyifdoesntexist; Permissions: authusers-modify;

[INI]

; Funtioniert leider noch nicht :(
; #if "English" == ReadIni(SetupSetting("MessagesFile"), "LangOptions", "LanguageName")

Filename: {code:GetIniDir}\TT32.ini; Section: Settings; Key: Language; String: {cm:Language}
Filename: {code:GetIniDir}\TT32.ini; Section: Reports; Key: Playerlist; String: {cm:Playerlist}
Filename: {code:GetIniDir}\TT32.ini; Section: Reports; Key: PlayerlistPerName; String: {cm:PlayerlistPerName}
Filename: {code:GetIniDir}\TT32.ini; Section: Reports; Key: PlayerlistPerNumber; String: {cm:PlayerlistPerNumber}
Filename: {code:GetIniDir}\TT32.ini; Section: Reports; Key: PlayerlistPerAssociation; String: {cm:PlayerlistPerAssociation}
Filename: {code:GetIniDir}\TT32.ini; Section: Reports; Key: Participants; String: {cm:Participants}
Filename: {code:GetIniDir}\TT32.ini; Section: Reports; Key: Entries; String: {cm:Entries}
Filename: {code:GetIniDir}\TT32.ini; Section: Reports; Key: Ranking; String: {cm:Ranking}
Filename: {code:GetIniDir}\TT32.ini; Section: Reports; Key: GroupResults; String: {cm:GroupResults}
Filename: {code:GetIniDir}\TT32.ini; Section: Reports; Key: Registration; String: {cm:Registration}
FileName: {code:GetIniDir}\TT32.ini; Section: Reports; Key: TeamEntries; String: {cm:TeamEntries}
FileName: {code:GetIniDir}\TT32.ini; Section: Reports; Key: ChampionshipEntries; String: {cm:ChampionshipEntries}
FileName: {code:GetIniDir}\TT32.ini; Section: Reports; Key: ConsolationEntries; String: {cm:ConsolationEntries}
FileName: {code:GetIniDir}\TT32.ini; Section: Reports; Key: WorldRanking; String: {cm:WorldRanking}
FileName: {code:GetIniDir}\TT32.ini; Section: Reports; Key: PartnerMissing; String: {cm:PartnerMissing}



[Icons]
Name: {group}\TTM; Filename: {app}\TTM32.exe
Name: {commondesktop}\TTM; Filename: {app}\TTM32.exe; WorkingDir: {code:GetIniDir}; MinVersion: 4,4; Tasks: desktopicon

[Run]
; Alle Files, die hier ausgefuehrt werden sollen, muessen am Ende vom [Code] zum herunterladen markiert werden
; Alte Files von 3.x loeschen
Filename: {sys}\cmd.exe; Parameters: /c del {app}\de_DE.dll; Check: FileExists(ExpandConstant('{app}\de_DE.dll')); Components: client
Filename: {sys}\cmd.exe; Parameters: /c del {app}\en_US.dll; Check: FileExists(ExpandConstant('{app}\en_US.dll')); Components: client

; Supportprogramme installieren
; Redistributable fuer VS 2019, wir brauchen nur x86 fuer 32 Bit TTM
Filename: {tmp}\x86\vcredist_x86_2019.exe; Parameters: "/install /quiet"; Check: not Is64BitInstallMode() and not CheckVCRedistributables(); StatusMsg: Install VC2019 redistributables; Components: client
Filename: {tmp}\x64\vcredist_x64_2019.exe; Parameters: "/install /quiet"; Check: Is64BitInstallMode() and not CheckVCRedistributables(); StatusMsg: Install VC2019 redistributables; Components: client

; .NET 4.0
Filename: {tmp}\dotNetFx40_Full_x86_x64.exe; Parameters: /q /norestart; StatusMsg: Install .NET 4.0; Check: not CheckDotNET; Components: database

; SQL Server Native Client
Filename: msiexec.exe; Parameters: "/qb /norestart /i ""{tmp}\x86\msodbcsql_18.3.1.1_x86.msi"" IACCEPTMSODBCSQLLICENSETERMS=YES "; Flags: runascurrentuser hidewizard; Check: not IsWin64() and not CheckSQLNativeClientVersion(); StatusMsg: Install SQL Server Native Client; Components: not Database
Filename: msiexec.exe; Parameters: "/qb /norestart /i ""{tmp}\x64\msodbcsql_18.3.1.1_x64.msi"" IACCEPTMSODBCSQLLICENSETERMS=YES "; Flags: runascurrentuser hidewizard; Check: IsWin64() and not CheckSQLNativeClientVersion(); StatusMsg: Install SQL Server Native Client; Components: not Database

; SQL Server 2022 64 Bit
Filename: {tmp}\x64\SQLEXPR_2022_x64_ENU.exe; Parameters: /QS /IACCEPTSQLSERVERLICENSETERMS /INSTANCENAME=MSSQLSERVER {code:UpgradeSQLServer|''}; Flags: runascurrentuser hidewizard; Check: IsWin64() and not CheckSQLServerVersion(); StatusMsg: Install SQL Server 2022; Components: database

; Berechtigungen setzen
Filename: {sys}\cacls.exe; Parameters: """{code:GetIniDir}"" /E /G {computername}\SQLServerMSSQLUser${computername}$MSSQLSERVER:C"; Flags: runascurrentuser hidewizard skipifdoesntexist; StatusMsg: Set access rights; Components: database
; Geht leider nicht, weil es z.B. im deutschen "Benutzer" heisst.
;Filename: "{sys}\cacls.exe"; Parameters: """{code:GetIniDir}\TT32.ini"" /E /G ""Users"":C"; Flags: hidewizard skipifdoesntexist; Components: client; Check: isAdminInstallMode


[Code]
var
  {Globale Variable fuer die Passwortseite}
  Page : TInputQueryWizardPage;
  LicenseFile : String;
  AskForLicenseFile : Boolean;

{Check if this is Windows XP}
function IsWinXP() : Boolean;
begin
  Result := (GetWindowsVersion() shr 24) < 6;
end;

{Sucht ein Verzeichnis mit TT32.ini.}
{Erster Versuch ist Installation (app), wie es frueher war.}
{Wird das File dort nicht gefunden dann (commonappdata), falls es dort ist oder setup als Admin ausgefuehrt wird.}
{Letzter default ist (userappdata).}
{Param ist ein Dummy, die [INI] Section verlang einen Parameter}
function GetIniDir(Param: String): String;
begin
  if (FileExists(ExpandConstant( '{app}\TT32.ini' ))) then
  begin
    Result := ExpandConstant('{app}');
  end
  else if ( isAdminInstallMode OR FileExists(ExpandConstant( '{commonappdata}\TTM\TT32.ini' )) ) then
  begin
    CreateDir(ExpandConstant('{commonappdata}\TTM'));
    Result := ExpandConstant('{commonappdata}\TTM');
  end
  else if ( FileExists(ExpandConstant( '{userappdata}\TTM\TT32.ini' )) ) then
  begin
    Result := ExpandConstant('{userappdata}\TTM');
  end
  else
  begin
    CreateDir(ExpandConstant('{localappdata}\TTM'));
    Result := ExpandConstant('{localappdata}\TTM');
  end
end;


{Prueft, ob .NET 3.5 SP1 installiert ist.}
function CheckDotNET(): Boolean;
begin
  {Bedingung ist: Registry Eintrag existiert}
  Result := RegKeyExists(HKLM, 'Software\Microsoft\NET Framework Setup\NDP\v4.0');
end;


{Prueft, ob Windows Installer 4.5 oder hoeher installiert ist.}
function CheckWindowsInstaller(): Boolean;
  var
    MajorVersion: Cardinal;
    MinorVersion: Cardinal;

begin

    {Bedingung ist: msi.dll existert und Version ist >= 4.5}
    Result := FileExists(ExpandConstant('{sys}\msi.dll')) and
              GetVersionNumbers(ExpandConstant('{sys}\msi.dll'), MajorVersion, MinorVersion) and
              (MajorVersion >= ((4 shl 16) or 5));
end;

{Prueft, ob VC redistributables are installed}
function CheckVCRedistributables() : Boolean;
begin
  if (Is64BitInstallMode()) then
  begin
    Result := RegKeyExists(HKLM, 'Software\Microsoft\VisualStudio\14.0\VC\Runtimes\x64\Installed');
  end
  else
  begin
    Result := RegKeyExists(HKLM, 'Software\Microsoft\VisualStudio\14.0\VC\Runtimes\x86\Installed');
  end;
end;


{Prueft, ob SQL Native Client ODBC-Treiber installiert ist}
function CheckSQLNativeClientVersion() : Boolean;
begin
  Result := RegKeyExists(HKLM, 'Software\ODBC\ODBCINST.INI\ODBC Driver 18 for SQL Server');
end;


{Prueft, ob MS SQL Server bereits installiert ist (egal welche Version)}
function CheckSQLServer() : Boolean;
begin
  {Bedinung ist, ob es den Service MSSQLSERVER gibt. Die Version frag ich nicht ab.}
  Result := RegKeyExists(HKLM, 'System\CurrentControlSet\Services\MSSQLSERVER');
end;

{Prueft, ob MS SQL Server die richtige Version hat}
function CheckSQLServerVersion() : Boolean;
  var  tmp : String; tmpMajor, tmpMinor, tmpBuild: Longint; idx: Integer;
begin
  {Server ist nicht installiert oder ich kann die Registry nicht abfragen: Falsche Version annehmen.}
  if (not CheckSQLServer() or not RegQueryStringValue(HKEY_LOCAL_MACHINE, 'Software\Microsoft\MSSQLServer\MSSQLServer\CurrentVersion', 'CurrentVersion', tmp)) then
  begin
    Result := False;
  end
  else
  begin
    idx := Pos('.', tmp);
    tmpMajor := StrToInt(Copy(tmp, 1, idx - 1));

    tmp := Copy(tmp, idx + 1, Length(tmp) - idx);
    idx := Pos('.', tmp);
    tmpMinor := StrToInt(Copy(tmp, 1, idx - 1));

    tmp := Copy(tmp, idx + 1, Length(tmp) - idx);
    idx := Pos('.', tmp);
    tmpBuild := StrToInt(Copy(tmp, 1, idx - 1));

    {Soll: 16.0.1000.x (2022)}
    Result := (tmpMajor > 16) or ((tmpMajor = 16) and ((tmpMinor > 0) or ((tmpMinor = 0) and ((tmpBuild > 1000) or ((tmpBuild = 1000))))));
  end;    
end;


{Parameter fuer die Installation von SQL Express.}
function UpgradeSQLServer(Param: String) : String;
begin
  if (CheckSQLServer()) then
  begin
    Result := '/ACTION=UPGRADE';
  end
  else
  begin
    Result := '/ACTION=INSTALL /FEATURES=SQL,Tools ' +
              '/SAPWD=' + Page.Values[0] + ' /SECURITYMODE=SQL /TCPENABLED=1 ' +
              '/SQLSVCACCOUNT="NT AUTHORITY\Network Service" /SQLSYSADMINACCOUNTS="BUILTIN\Administrators"';
  end;
end;

procedure GetFile(File: String);
  var tmp : String; size : Cardinal;
begin
  if (Pos('\', File) > 0) then
  begin
    CreateDir( ExpandConstant('{tmp}\' + Copy(File, 1, Pos('\', File) - 1)) );
  end;

  if ( FileExists(ExpandConstant('{src}\' + File)) ) then
  begin
    CopyFile(ExpandConstant('{src}\' + File), ExpandConstant('{tmp}\' + File), False);
  end
  else
  begin
    tmp := File;
    StringChangeEx(tmp, '\', '/', True);

    if (not ITD_GetFileSize('http://downloads.ttm.co.at/ttm/' + tmp, size)) then
      size := 0;

    ITD_AddFileSize('http://downloads.ttm.co.at/ttm/' + tmp, ExpandConstant('{tmp}\' + File), size);
  end;
end;

{---------------------------------------------------------------------------------------------------------------------------------------------------}
{Die folgenden Funktionen sind Callback-Funktionen von InnoSetup}

{PrepareToInstall wird unmittelbar vor dem Start (nach der letzten Seite) der Installation aufgerufen}
{Erforderliche Programme pruefen, die einen Neustart erfordern}
function PrepareToInstall(var NeedsReboot : Boolean) : String;
  var
    ResultCode : Integer;
    RunOnceData : String;
    CheckSumBefore, CheckSumAfter : String;
    UninstallProg : String;
begin
  {Wenn wir 64 Bit installieren, dann eine evtl. vorhandene 32 Bit deinstallieren}
  if (Is64BitInstallMode() and RegKeyExists(HKLM, 'Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\TTM_is1')) then
  begin
     RegQueryStringValue(HKLM, 'Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\TTM_is1', 'UninstallString', UninstallProg);
     UninstallProg := RemoveQuotes(UninstallProg);
     if (FileExists(UninstallProg)) then
     begin
       Exec(UninstallProg, '/SILENT', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
     end;
  end;

  {Obsolete Eintraege aus INI loeschen}
  DeleteIniEntry('Reports', 'PlayerlistPerName', GetIniDir('') + '\TT32.ini');
  DeleteIniEntry('Reports', 'PlayerlistPerNumber', GetIniDir('') + '\TT32.ini');
  DeleteIniEntry('Reports', 'PlayerlistPerAssociation', GetIniDir('') + '\TT32.ini');

  {Test, ob sich durch die Installation was geaendert hat, dass einen Neustart erfordert}
  CheckSumBefore := MakePendingFileRenameOperationsChecksum;

  {Bei Bedarf den Windows Installer installieren}
  if ( (Pos('database', WizardSelectedComponents(false)) > 0) and not CheckWindowsInstaller() ) then
  begin
    if ( IsWinXP() ) then
    begin
      Exec(ExpandConstant('{tmp}\xp\WindowsXP-KB942288-v3-x86.exe'), '/quiet /norestart', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    end
    else if (IsWin64()) then
    begin
      ShellExec('', ExpandConstant('{tmp}\x64\Windows6.0-KB942288-v2-x64.msu'), '/quiet /norestart', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    end
    else
    begin
      ShellExec('', ExpandConstant('{tmp}\x86\Windows6.0-KB942288-v2-x86.msu'), '/quiet /norestart', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    end;
  end;

  CheckSumAfter := MakePendingFileRenameOperationsChecksum;

  {Wenn sich die Checksumme geaendert hat, ist ein Neustart erforderlich, bevor es weitergehen kann}
  if (CheckSumBefore <> CheckSumAfter) then
  begin
    {RunOnce: Pragramm (setup) mit Parametern fuer ein silent install}

    RunOnceData := '"' + ExpandConstant('{srcexe}') + '"';
    RunOnceData := RunOnceData + ' /LANG=' + ExpandConstant('{language}');
    RunOnceData := RunOnceData + ' /DIR="' + WizardDirValue + '"';
    RunOnceData := RunOnceData + ' /GROUP="' + WizardGroupValue + '"';
    RunOnceData := RunOnceData + ' /TYPE="' + WizardSetupType(false) + '"';
    RunOnceData := RunOnceData + ' /COMPONENTS="' + WizardSelectedComponents(false) + '"';
    RunOnceData := RunOnceData + ' /TASKS="' + WizardSelectedTasks(false) + '"';

    if (WizardNoIcons) then
      RunOnceData := RunOnceData + ' /NOICONS';

    RunOnceData := RunOnceData + ' /SILENT';

    {Eigene Parameter}
    RunOnceData := RunOnceData + ' /restart=1 /sapwd="' + Page.Values[0] + '"';

    {Registryeintrag setzen}
    RegWriteStringValue(HKEY_CURRENT_USER, 'Software\Microsoft\Windows\CurrentVersion\RunOnce', 'SQL Server install', RunOnceData);

    NeedsReboot := true;

    {Return <> '' bedeutet Installation abbrechen (und Neustart)}
    Result := ExpandConstant('{cm:RebootMessage}');
  end;

  {RunOnce Eintrag entfernen, falls er noch dort sein sollte}
  if (not NeedsReboot) then
    RegDeleteValue(HKEY_CURRENT_USER, 'Software\Microsoft\Windows\CurrentVersion\RunOnce', 'SQL Server install');
end;

{Wird vor jeder Seite aufgerufen, ob sie angezeigt werden soll.}
function ShouldSkipPage(PageID: Integer): Boolean;
begin
  {Die Passwortseite nicht anzeigen, wenn keine DB installiert wird}
  {Gleiches gilt auch fuer Update der DB}
  Result := (PageID = Page.ID) and ( (Pos('database', WizardSelectedComponents(false)) = 0) or CheckSQLServer() );
end;


{Wird beim Aufruf des Installers aufgerufen}
{Initialisierung: Legt die Passwortseite an}
procedure InitializeWizard();
begin
  Page := CreateInputQueryPage(wpSelectComponents, ExpandConstant('{cm:PasswordPageTitle}'), '', ExpandConstant('{cm:PasswordPageDescription}'));
  Page.Add(ExpandConstant('{cm:EnterPassword}'), true);
  Page.Add(ExpandConstant('{cm:ConfirmPassword}'), true);

  Page.Values[0] := ExpandConstant('{param:sapwd|}');
  Page.Values[1] := ExpandConstant('{param:sapwd|}');

  LicenseFile := ExpandConstant('{src}\License.ini');
  AskForLicenseFile := True;

  ITD_Init();
  ITD_DownloadAfter(wpReady);
end;


{Wird bei jedem "Next" aufgerufen}
function NextButtonClick(CurPageID : Integer) : Boolean;
begin
  Result := true;

  {Passworteingabe pruefen: PWD darf nicht leer oder unterschiedlich sein}
  if ( CurPageID = Page.ID) then
  begin
    if (Page.Values[0] = '') then
    begin
      MsgBox(ExpandConstant('{cm:EmptyPassword}'), mbError, MB_OK);
      Result := false;
    end
    else if (Page.Values[0] <> Page.Values[1]) then
    begin
      MsgBox(ExpandConstant('{cm:PasswordDoesNotMatch}'), mbError, MB_OK);
      Result := false;
    end;
  end;

  if ( CurPageID = wpReady ) then
  begin
    {Benotigte Files nur herunterladen, wenn SQL Server nicht aktuell ist (oder nicht existiert)}
    if ( (Pos('database', WizardSelectedComponents(false)) > 0) and not CheckSQLServerVersion() ) then
    begin
      if (not CheckDotNET() ) then 
      begin
        GetFile('dotNetFx40_Full_x86_x64.exe');
      end;

      GetFile('x64\SQLEXPR_2022_x64_ENU.exe');
    end;

    {Bei Bedarf den Windows Installer installieren}
    if ( (Pos('database', WizardSelectedComponents(false)) > 0) and not CheckWindowsInstaller() ) then
    begin
      {Wenn ein reboot erforderlich ist, die Files erst beim naechsten mal herunterladen}
      {RunOnce kann keine Files vom Internet oder von Shared ausfuehren}
      ITD_ClearFiles();

      GetFile('x64\Windows6.0-KB942288-v2-x64.msu');
    end;

    if ( not CheckVCRedistributables() ) then
    begin
      if (Is64BitInstallMode()) then
      begin
        GetFile('x64\vcredist_x64_2019.exe')
      end
      else
      begin
        GetFile('x86\vcredist_x86_2019.exe')
      end;
    end;
  
    if ( not CheckSQLNativeClientVersion() ) then
    begin
      if (Is64BitInstallMode()) then
      begin
        GetFile('x64\msodbcsql_18.3.1.1_x64.msi');
      end
      else
      begin
        GetFile('x86\msodbcsql_18.3.1.1_x86.msi');
      end;
    end;
  end;
end;
